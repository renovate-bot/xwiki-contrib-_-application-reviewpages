<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>ReviewPages</web>
  <name>Script</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>ReviewPages.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Script</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="true"}}
{{html wiki="true"}}
#set($reDoc = $xwiki.getDocument($request.getParameter('reDoc')))
#if(!$reDoc.isNew())
#set($reviewdata = $reDoc.getObject('ReviewPages.ReviewData'))
#if("$!{reviewdata}" != "")
## we always assume edit mode here ...
 #set ($discard = $reDoc.use('ReviewPages.ReviewData'))
 #if($request.xpage=='plain')
 &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
 &lt;input type="hidden" name="language" value="$!{escapetool.xml($reDoc.getRealLanguage())}" /&gt;
 &lt;input type="hidden" name="xpage" value="plain" /&gt;
 &lt;input type="hidden" name="outputSyntax" value="plain" /&gt;
 &lt;input type="hidden" name="reDoc" value="$escapetool.html($request.getParameter('reDoc'))" /&gt;
 #end
 (% class="xform" %)
 (((
  ; &lt;label for="ReviewPages.ReviewData_0_reviewDate"&gt;$services.localization.render('ReviewPages.dialog.newReviewDateLabel')&lt;/label&gt;
  : $reDoc.display('reviewDate', 'edit')
## TODO what else here ?
 )))
#else ## #if($reviewdata)
$services.localization.render('ReviewPages.dialog.noReviewFound')
#end
#end
{{/html}}
{{/velocity}}</content>
  <object>
    <name>ReviewPages.Script</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>79c5c34c-a719-41ec-a633-4a8022ac1b83</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
#set ($discard = $services.localization.use('document', 'ReviewPages.Translations'))

ReviewPages = {};

ReviewPages.displayLiveTableRow = function(row, i, table) {
  var tr = new Element('tr');
  if (row.doc_viewable) {
    var docLink = new Element('a', {'href' : row.doc_url}).update(row.doc_name);
    tr.appendChild(new Element('td').update(docLink));
    tr.appendChild(new Element('td').update(row.doc_space));
    tr.appendChild(new Element('td').update(row.doc_date));
    var authorLink = new Element('a', {'href' : row.doc_author_url}).update(row.doc_author);
    tr.appendChild(new Element('td').update(authorLink));
    var tdNextReview = new Element('td', {'class' : 'reviewDate'}).update(row.nextReviewDate);
    var reviewDate = new Date(row.nextReviewDate); // FIXME: try be date format invariant!
    var isOverdue = (!reviewDate || (reviewDate.isBefore(new Date())) || isNaN(reviewDate.getTime()) );
    if (isOverdue) {
      tdNextReview.addClassName('overdue');
    }
    tr.appendChild(tdNextReview);
    tr.appendChild(new Element('td').update(row.lastReviewer));
    tr.appendChild(new Element('td').update(row.reviewDate));

    var actions = new Element('td');
    var viewLink = new Element('a', {'href': row.doc_url, target: '_new'}).update("$services.localization.render('ReviewPages.ReviewData._actions.view')");
    actions.appendChild(viewLink);
    // todo: only if "canReview" ...
    if (row.doc_hasedit) {
        actions.appendChild( new Element('br')); // ToDo: style actions instead
        var reviewLink = new Element('a', {'href' : row.doc_url,'class':'reviewLink'}).update("$services.localization.render('ReviewPages.ReviewData._actions.review')");
        actions.appendChild(reviewLink);
        reviewLink.observe('click', function(e) {
          e.stop();
          new ReviewPages.ReviewDialog({'doc_url': row.doc_url, 'doc_fullName': row.doc_fullName});
          return false;
        });
        actions.appendChild( new Element('br'));
        var removeReviewLink = new Element('a', {'href': row.doc_url, 'class': 'removeReviewLink', 'title': "$services.localization.render('ReviewPages.ReviewData._actions.remove.label')"}).update("$services.localization.render('ReviewPages.ReviewData._actions.remove')");
        actions.appendChild(removeReviewLink);
        removeReviewLink.observe('click', function(e) {
          e.stop();
          ReviewPages.removeReviewDialog(row.doc_fullName, row.doc_name);
          return false;
        });
    }
    tr.appendChild(actions);
  }
  return tr;
}

ReviewPages.reloadLiveTable = function() {
  // reload/update livetable
  // the following does not work: no update, as filters have not changed ....
  // Event.fire( $('review'), 'xwiki:livetable:review:filtersChanged');
  // instead we use the global variable and access the table 
  var livetable = window.livetable_review;
  var end = livetable.limit;
  var start = Math.max(livetable.lastOffset, 1);
  livetable.clearCache();
  livetable.getRows(start, end, start, end);
}
ReviewPages.displayError = function(errorMessage) {
  if (!errorMessage) {
    errorMessage = "$services.localization.render('ReviewPages.generic.errormessage')";
  }
  new XWiki.widgets.Notification("$services.localization.render('core.widgets.confirmationBox.notification.failed')" + errorMessage, "error");
}

ReviewPages.ReviewDialog = Class.create(XWiki.widgets.ModalPopup, {
  defaultInteractionParameters: {
    loadContentUrl: "$escapetool.javascript($xwiki.getURL('ReviewPages.Script','view','xpage=plain'))",
  },
  initialize: function($super, interactionParameters) {
    this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
    // call constructor from ModalPopup with params content, shortcuts, options
    $super(
      // this element will end up as this.content
      new Element('form', {'class' : 'xform'}),
      {
        "show": {method: this.showDialog, keys: []},
        "close": {method: this.closeDialog, keys: ['Esc']}
      },
      {
        verticalPosition: "top",
        backgroundColor: "$theme.pageBackgroundColor",
        title : "$services.localization.render('ReviewPages.dialog.title')"
      }
    );
    this.loadContent();
    this.showDialog();
    this.setClass("moccacal-modal-popup");
    this.savingBox = new XWiki.widgets.Notification("$services.localization.render('core.widgets.confirmationBox.notification.inProgress')", "inprogress", {inactive: true});
    $$(".xdialog-modal-container").each(function(div) { div.setStyle({position: 'absolute'}) });
  },
  loadContent: function() {
    new Ajax.Request( this.interactionParameters.loadContentUrl, {
      method: 'get',
      parameters: { 'reDoc' : this.interactionParameters.doc_fullName },
      onSuccess: function(response) {
        if (response.status == 0) {
          return;
        }
        try {
          var responseText = response.responseText || "no response text";
          var old = $('formcontent');
          if (old) {
            old.purge();
            old.remove();
          }
          this.content.insert('&lt;div id="formcontent"&gt;' + responseText + '&lt;/div&gt;');
          var formcontent = $('formcontent');
          Element.select(formcontent,'input.datetime').each(function(dateTimeInput) {
            new XWiki.DateTimePicker(dateTimeInput, dateTimeInput.title);
          });
          this.content.observe('submit', this.submitReviewForm.bind(this));
          var buttons = new Element('div', {'class':'buttons'});
          buttons.insert(this.createButton("button","$services.localization.render('ReviewPages.dialog.submitReview')","","update-review","btn"));
          buttons.insert(this.createButton("button","$services.localization.render('ReviewPages.dialog.cancel')","","cancel-review","btn"));
          buttons.down('#update-review').observe('click', this.submitReviewForm.bind(this));
          buttons.down('#cancel-review').observe('click', this.closeDialog.bind(this));
          formcontent.insert(buttons);
        } catch (e) { ReviewPages.displayError(e); console.log(e); }
      }.bind(this),
      onFailure: function() {
        ReviewPages.displayError();
      }
    });
  },
  submitReviewForm: function(event) {
    if (event) { event.stop(); }
    this.savingBox.show();
    this.content.writeAttribute('action', "$escapetool.javascript($xwiki.getURL('ReviewPages.UpdateService','get'))");
    this.content.request({
      onSuccess: function(response) {
        if (response.status == 0) {
          return;
        }
        this.savingBox.hide();
        if ( !response.responseJSON || response.responseJSON.error) {
          ReviewPages.displayError(response.responseJSON?response.responseJSON.error:'')
        } else {
          new XWiki.widgets.Notification("$services.localization.render('core.widgets.confirmationBox.notification.done')", "done");
          this.closeDialog();
          ReviewPages.reloadLiveTable();
        }
      }.bind(this),
      onFailure: function(e) {
        this.savingBox.hide();
        ReviewPages.displayError();
      }.bind(this)
    });
  }
});

ReviewPages.removeReviewDialog = function(pageFullName, pageName) {

  new XWiki.widgets.ConfirmationBox({ 
    onYes: function() { 
      new Ajax.Request( "$escapetool.javascript($xwiki.getURL('ReviewPages.RemoveScript'))", {
        method: 'get',
        parameters: { 'reDoc': pageFullName, 'outputSyntax': 'plain', 'xpage': 'plain' },
        onSuccess: function(response) {
          if (response.status == 0) {
            return;
          }
          try {
            var responseJSON = response.responseJSON;
            var error = (responseJSON)?responseJSON.error:"$services.localization.render('ReviewPages.generic.errormessage')";
            if (error) {
              ReviewPages.displayError(error);
            } else {
              new XWiki.widgets.Notification("$services.localization.render('core.widgets.confirmationBox.notification.done')", "done");
              ReviewPages.reloadLiveTable();
            }
          } catch (e) { ReviewPages.displayError(e); }
        },
        onFailure: function() {
          ReviewPages.displayError();
        }
      });
    }
  },
  { confirmationText: "$services.localization.render('ReviewPages.dialog.confirmRemove')".sub("{0}", pageName),
       yesButtonText: "$services.localization.render('yes')",
        noButtonText: "$services.localization.render('no')"
  });
};


(function(){
  function initDatePicker() {
     var dateFormat = "$escapetool.javascript($xwiki.getDocument('ReviewPages.ReviewData').getxWikiClass().get('nextReviewDate').getPropertyClass().getDateFormat())";
     new XWiki.DateTimePicker($('addReviewPage_nextReviewDate').addClassName('datetime'), dateFormat)
  }
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; initDatePicker()) || document.observe("xwiki:dom:loaded", initDatePicker);
})()
</code>
    </property>
    <property>
      <name>Livetable helpers</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ReviewPages.Script</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>c3abdc52-9b13-4605-942d-67361cd40cff</guid>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <name>ReviewPages.Script</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>3810e50c-e851-4396-a068-157f8ea5e8aa</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/* review dialog */
div.calendar_date_select {
  z-index: 1010;
}

#review .overdue {
  color:red;
  font-weight:bold;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ReviewPages.Script</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>bdf863e6-3261-4a39-9e77-5969c1b6b6c4</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content/>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.panels.Applications</extensionPointId>
    </property>
    <property>
      <name>org.xwiki.contrib.applications.ReviewPagesApplication</name>
    </property>
    <property>
      <parameters>#set ($discard = $services.localization.use('document', 'ReviewPages.Translations'))
label=$services.localization.render('ReviewPages.application')
target=ReviewPages.WebHome
icon=icon:accept</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
